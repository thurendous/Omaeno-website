"use strict";(self.webpackChunkmy_website_with_docusaurus=self.webpackChunkmy_website_with_docusaurus||[]).push([[605],{3905:(e,n,r)=>{r.d(n,{Zo:()=>p,kt:()=>f});var t=r(7294);function o(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function d(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function a(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?d(Object(r),!0).forEach((function(n){o(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):d(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,o=function(e,n){if(null==e)return{};var r,t,o={},d=Object.keys(e);for(t=0;t<d.length;t++)r=d[t],n.indexOf(r)>=0||(o[r]=e[r]);return o}(e,n);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(t=0;t<d.length;t++)r=d[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=t.createContext({}),l=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):a(a({},n),e)),r},p=function(e){var n=l(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},c=t.forwardRef((function(e,n){var r=e.components,o=e.mdxType,d=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(r),f=o,m=c["".concat(s,".").concat(f)]||c[f]||u[f]||d;return r?t.createElement(m,a(a({ref:n},p),{},{components:r})):t.createElement(m,a({ref:n},p))}));function f(e,n){var r=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var d=r.length,a=new Array(d);a[0]=c;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<d;l++)a[l]=r[l];return t.createElement.apply(null,a)}return t.createElement.apply(null,r)}c.displayName="MDXCreateElement"},2403:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>d,metadata:()=>i,toc:()=>l});var t=r(7462),o=(r(7294),r(3905));const d={title:"3 ERC721",author:"thurendous, Polymetis",date:"November 13th, 2022",keywords:["solidity","NFT"],description:"solidity ERC721 NFT",tags:["advanced solidity","ERC721","NFT"]},a=void 0,i={unversionedId:"SolidityAdvanced/ERC721",id:"SolidityAdvanced/ERC721",title:"3 ERC721",description:"solidity ERC721 NFT",source:"@site/docs/SolidityAdvanced/3_ERC721.md",sourceDirName:"SolidityAdvanced",slug:"/SolidityAdvanced/ERC721",permalink:"/docs/SolidityAdvanced/ERC721",draft:!1,editUrl:"https://github.com/thurendous/Omaeno-website/tree/master/docs/SolidityAdvanced/3_ERC721.md",tags:[{label:"advanced solidity",permalink:"/docs/tags/advanced-solidity"},{label:"ERC721",permalink:"/docs/tags/erc-721"},{label:"NFT",permalink:"/docs/tags/nft"}],version:"current",sidebarPosition:3,frontMatter:{title:"3 ERC721",author:"thurendous, Polymetis",date:"November 13th, 2022",keywords:["solidity","NFT"],description:"solidity ERC721 NFT",tags:["advanced solidity","ERC721","NFT"]},sidebar:"tutorialSidebar",previous:{title:"2 Multi-Sig Wallet",permalink:"/docs/SolidityAdvanced/Multi-SigWallet"},next:{title:"Ethers.js",permalink:"/docs/category/ethersjs"}},s={},l=[],p={toc:l};function u(e){let{components:n,...r}=e;return(0,o.kt)("wrapper",(0,t.Z)({},p,r,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"\u3053\u3061\u3089\u306e\u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u306f\u7c21\u6613\u7684\u306a ERC721 \u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u306e\u5185\u5bb9\u3067\u3042\u308b\u3002\u3053\u3053\u3067\u306f uri \u95a2\u9023\u306e\u95a2\u6570\u304c\u306a\u3044\u304c\u3001\u57fa\u672c\u7684\u306a\u95a2\u6570\u304c\u3059\u3079\u3066\u5099\u3048\u3066\u3044\u308b\u7acb\u6d3e\u306a NFT \u3067\u3042\u308b\u3002\u3053\u3061\u3089\u306e\u95a2\u6570\u3092 remix \u3067\u30c7\u30d7\u30ed\u30a4\u3057\u3066\u8272\u3005\u904a\u3093\u3067\u898b\u3066\u304f\u3060\u3055\u3044\u3002"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sol"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\ninterface IERC165 {\n    function supportsInterface(bytes4 interfaceID) external view returns (bool);\n}\n\ninterface IERC721 is IERC165 {\n    function balanceOf(address owner) external view returns (uint balance);\n\n    function ownerOf(uint tokenId) external view returns (address owner);\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint tokenId\n    ) external;\n\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint tokenId,\n        bytes calldata data\n    ) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint tokenId\n    ) external;\n\n    function approve(address to, uint tokenId) external;\n\n    function getApproved(uint tokenId) external view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function isApprovedForAll(address owner, address operator)\n        external\n        view\n        returns (bool);\n}\n\ninterface IERC721Receiver {\n    function onERC721Received(\n        address operator,\n        address from,\n        uint tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\ncontract ERC721 is IERC721 {\n    event Transfer(address indexed from, address indexed to, uint indexed id);\n    event Approval(address indexed owner, address indexed spender, uint indexed id);\n    event ApprovalForAll(\n        address indexed owner,\n        address indexed operator,\n        bool approved\n    );\n\n    // token ID -> \u6240\u6709\u8005\u306eaddress\u306eMapping\u5909\u6570\n    mapping(uint => address) internal _ownerOf;\n\n    // \u6240\u6709\u8005\u306eaddress -> token count\u306eMapping\u5909\u6570\n    mapping(address => uint) internal _balanceOf;\n\n    // token ID -> \u30a2\u30d7\u30eb\u30fc\u30d6\u3055\u308c\u305faddress\n    mapping(uint => address) internal _approvals;\n\n    // owner -> operator\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308bMapping\n    mapping(address => mapping(address => bool)) public isApprovedForAll;\n\n    // interface\u304csupport\u3055\u308c\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\n    function supportsInterface(bytes4 interfaceId) external pure returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC165).interfaceId;\n    }\n\n    // token\u306eowner\u3092\u8fd4\u3059\u95a2\u6570\n    function ownerOf(uint id) external view returns (address owner) {\n        owner = _ownerOf[id];\n        require(owner != address(0), "token doesn\'t exist");\n    }\n\n    // \u3068\u3042\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u6301\u3063\u3066\u3044\u308b\u30c8\u30fc\u30af\u30f3\u6570\u3092\u8fd4\u3059\n    function balanceOf(address owner) external view returns (uint) {\n        require(owner != address(0), "owner = zero address");\n        return _balanceOf[owner];\n    }\n\n    // \u5168\u90e8\u306eNFT\u306e\u7ba1\u7406\u6a29\u9650\u3092\u3059\u308b\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u30ea\u30dc\u30fc\u30af\u3042\u308b\u3044\u30bb\u30c3\u30c8\u3059\u308b\n    function setApprovalForAll(address operator, bool approved) external {\n        isApprovedForAll[msg.sender][operator] = approved;\n        emit ApprovalForAll(msg.sender, operator, approved);\n    }\n\n    // id\u306etoken\u306b\u3064\u3044\u3066\u6a29\u9650\u3092\u6301\u3064\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u30bb\u30c3\u30c8\u3059\u308b\n    function approve(address spender, uint id) external {\n        address owner = _ownerOf[id];\n        require(\n            msg.sender == owner || isApprovedForAll[owner][msg.sender],\n            "not authorized"\n        );\n\n        _approvals[id] = spender;\n\n        emit Approval(owner, spender, id);\n    }\n\n    // \u7ba1\u7406\u6a29\u9650\u3092\u6301\u3064\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u8fd4\u3059\n    function getApproved(uint id) external view returns (address) {\n        require(_ownerOf[id] != address(0), "token doesn\'t exist");\n        return _approvals[id];\n    }\n\n    // \u7ba1\u7406\u6a29\u9650\u3092\u6301\u3064\u3042\u308b\u3044\u306f\u30aa\u30fc\u30ca\u30fc\u3067\u3042\u308b\u304b\u3092\u78ba\u8a8d\u3059\u308b\u95a2\u6570\n    function _isApprovedOrOwner(\n        address owner,\n        address spender,\n        uint id\n    ) internal view returns (bool) {\n        return (spender == owner ||\n            isApprovedForAll[owner][spender] ||\n            spender == _approvals[id]);\n    }\n\n    // from\u304b\u3089to\u3078token id\u3092\u9001\u308b\n    function transferFrom(\n        address from,\n        address to,\n        uint id\n    ) public {\n        require(from == _ownerOf[id], "from != owner");\n        require(to != address(0), "transfer to zero address");\n\n        require(_isApprovedOrOwner(from, msg.sender, id), "not authorized");\n\n        _balanceOf[from]--;\n        _balanceOf[to]++;\n        _ownerOf[id] = to;\n\n        delete _approvals[id];\n\n        emit Transfer(from, to, id);\n    }\n\n    // transfer\u3059\u308b\u3068\u3068\u3082\u306b\u3001\u9001\u308a\u5148\u304cERC721\u3092\u53d7\u4fe1\u3067\u304d\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3002\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u306f\u9001\u3089\u306a\u3044\u3088\u3046\u306b\u3057\u305f\uff08data\u304c\u306a\u3044\uff09\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint id\n    ) external {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                IERC721Receiver(to).onERC721Received(msg.sender, from, id, "") ==\n                IERC721Receiver.onERC721Received.selector,\n            "unsafe recipient"\n        );\n    }\n\n    // \u4e0a\u8a18\u3068\u540c\u3058\uff08data\u304c\u3042\u308b\uff09\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint id,\n        bytes calldata data\n    ) external {\n        transferFrom(from, to, id);\n\n        require(\n            to.code.length == 0 ||\n                IERC721Receiver(to).onERC721Received(msg.sender, from, id, data) ==\n                IERC721Receiver.onERC721Received.selector,\n            "unsafe recipient"\n        );\n    }\n\n    // internal\u306amint\u95a2\u6570\u3002to\u3078id token\u3092mint\u3059\u308b\n    function _mint(address to, uint id) internal {\n        require(to != address(0), "mint to zero address");\n        require(_ownerOf[id] == address(0), "already minted");\n\n        _balanceOf[to]++;\n        _ownerOf[id] = to;\n\n        emit Transfer(address(0), to, id);\n    }\n\n    // burn\u95a2\u6570\u3002owner\u3060\u3051\u304cNFT\u306e\u6240\u6709\u8005\u306a\u3069\u3092\u524a\u9664\u3059\u308b\n    function _burn(uint id) internal {\n        address owner = _ownerOf[id];\n        require(owner != address(0), "not minted");\n\n        _balanceOf[owner] -= 1;\n\n        delete _ownerOf[id];\n        delete _approvals[id];\n\n        emit Transfer(owner, address(0), id);\n    }\n}\n\n// NFT\u306e\u672c\u4f53\u30b3\u30f3\u30c8\u30e9\u30af\u30c8\u3001ERC721\u3092\u7d99\u627f\u3059\u308b\ncontract MyNFT is ERC721 {\n    // mint\u95a2\u6570\u3001_mint\u3092\u547c\u3073\u51fa\u3059\u3002\u7279\u306b\u3053\u3053\u3067\u306f\u5236\u9650\u306a\u3069\u3092\u3057\u3066\u3044\u306a\u3044\u304c\u3001\u672c\u5f53\u306a\u3089\u30db\u30ef\u30a4\u30c8\u30ea\u30b9\u30c8\u306a\u3069\u306e\u5236\u9650\u304c\u304b\u304b\u308b\u3060\u308d\u3046\n    function mint(address to, uint id) external {\n        _mint(to, id);\n    }\n\n    // burn\u95a2\u6570\u3002_burn\u3092\u547c\u3073\u51fa\u3059\n    function burn(uint id) external {\n        require(msg.sender == _ownerOf[id], "not owner");\n        _burn(id);\n    }\n}\n\n')),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"Remix"),"\u3067\u8a66\u3059"))}u.isMDXComponent=!0}}]);