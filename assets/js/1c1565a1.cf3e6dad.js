"use strict";(self.webpackChunkmy_website_with_docusaurus=self.webpackChunkmy_website_with_docusaurus||[]).push([[7058],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>l});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},g=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),f=u(t),l=a,y=f["".concat(c,".").concat(l)]||f[l]||d[l]||i;return t?r.createElement(y,s(s({ref:n},g),{},{components:t})):r.createElement(y,s({ref:n},g))}));function l(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=f;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var u=2;u<i;u++)s[u]=t[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2553:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var r=t(7462),a=(t(7294),t(3905));const i={title:"42 Verifying Signature",author:"thurendous, Polymetis",date:"October 30th, 2022",keywords:["solidity","verifying","Signature"],description:"understand verifying signature through solidity code example",tags:["solidity","signature","verifying"]},s=void 0,o={unversionedId:"Learning/VerifyingSignature copy",id:"Learning/VerifyingSignature copy",title:"42 Verifying Signature",description:"understand verifying signature through solidity code example",source:"@site/docs/Learning/42_VerifyingSignature copy.md",sourceDirName:"Learning",slug:"/Learning/VerifyingSignature copy",permalink:"/docs/Learning/VerifyingSignature copy",draft:!1,editUrl:"https://github.com/thurendous/Omaeno-website/tree/master/docs/Learning/42_VerifyingSignature copy.md",tags:[{label:"solidity",permalink:"/docs/tags/solidity"},{label:"signature",permalink:"/docs/tags/signature"},{label:"verifying",permalink:"/docs/tags/verifying"}],version:"current",sidebarPosition:42,frontMatter:{title:"42 Verifying Signature",author:"thurendous, Polymetis",date:"October 30th, 2022",keywords:["solidity","verifying","Signature"],description:"understand verifying signature through solidity code example",tags:["solidity","signature","verifying"]},sidebar:"tutorialSidebar",previous:{title:"41 Hashing With Keccak256",permalink:"/docs/Learning/HashingWIthKeccak256"},next:{title:"43 Gas Saving",permalink:"/docs/Learning/GasSaving"}},c={},u=[],g={toc:u};function d(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sol"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.13;\n\n/* Signature Verification \u7f72\u540d\u306e\u30d9\u30ea\u30d5\u30a1\u30a4\uff08\u691c\u8a3c\uff09\n\n\u7f72\u540d\u3001\u30d9\u30ea\u30d5\u30a1\u30a4\uff08\u691c\u8a3c\uff09\u306e\u6d41\u308c\n# \u7f72\u540d\n1. \u7f72\u540d\u7528\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4f5c\u6210\u3059\u308b\n2. \u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u7f72\u540d\u3059\u308b\n3. \u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7f72\u540d\u3001\u3053\u308c\u306f\u30aa\u30d5\u30c1\u30a7\u30fc\u30f3\u3067\u3084\u308b\u306e\u3067\u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u30ad\u30fc\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u62c5\u4fdd\n\n# \u30d9\u30ea\u30d5\u30a1\u30a4\n1. \u30aa\u30ea\u30b8\u30ca\u30eb\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u4f5c\u308b\n2. \u7f72\u540d\u3068\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u5fa9\u5143\n3. \u5fa9\u5143\u3055\u308c\u305f\u7f72\u540d\u8005\u3068\u672c\u4eba\u306e\u6bd4\u8f03\n*/\n\ncontract VerifySignature {\n    /* 1. Unlock MetaMask account\n    ethereum.enable()\n    */\n\n    /* 2. \u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u8a08\u7b97\n    getMessageHash(\n        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,\n        123,\n        "coffee and donuts",\n        1\n    )\n\n    hash = "0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd"\n    */\n    function getMessageHash(\n        address _to,\n        uint _amount,\n        string memory _message,\n        uint _nonce\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_to, _amount, _message, _nonce));\n    }\n\n    /* 3. message\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u306b\u7f72\u540d\n    # \u30d6\u30e9\u30a6\u30b6\u3092\u4f7f\u3046\u5834\u5408\n    account = "copy paste account of signer here"\n    ethereum.request({ method: "personal_sign", params: [account, hash]}).then(console.log)\n\n    # web3\u3092\u4f7f\u3046\u5834\u5408\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\n\n    \u7f72\u540d\u306f\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5909\u308f\u308b\u3068\u5f53\u7136\u7d50\u679c\u3082\u5909\u308f\u308b\n    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function getEthSignedMessageHash(bytes32 _messageHash)\n        public\n        pure\n        returns (bytes32)\n    {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        "\\x19Ethereum Signed Message\\n" + len(msg) + msg\n        */\n        return\n            keccak256(\n                abi.encodePacked("\\x19Ethereum Signed Message:\\n32", _messageHash)\n            );\n    }\n\n    /* 4. \u7f72\u540d\u306e\u30d9\u30ea\u30d5\u30a1\u30a4\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\n    amount = 123\n    message = "coffee and donuts"\n    nonce = 1\n    signature =\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function verify(\n        address _signer,\n        address _to,\n        uint _amount,\n        string memory _message,\n        uint _nonce,\n        bytes memory signature\n    ) public pure returns (bool) {\n        bytes32 messageHash = getMessageHash(_to, _amount, _message, _nonce);\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\n\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\n    }\n\n    // \u7f72\u540d\u8005\u306e\u5fa9\u5143\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\n        public\n        pure\n        returns (address)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    // \u7f72\u540d\u8005\u3092\u5fa9\u5143\u3055\u305b\u308b\u305f\u3081\u306b\u4f7f\u308f\u308c\u305f\u7f72\u540d\u3092r,s,v\u306b\u5206\u5272\u3059\u308b\u95a2\u6570\n    function splitSignature(bytes memory sig)\n        public\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        require(sig.length == 65, "invalid signature length");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n}\n\n\n')),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://remix.ethereum.org/"},"Remix"),"\u3067\u8a66\u3059"))}d.isMDXComponent=!0}}]);