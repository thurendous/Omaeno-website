---
slug: What-is-Minial-Proxy-Contract
title: Minimal Proxy Contract とは
authors: [Thurendous]
blogDescription: 'Foundryの使い方入門'
tags: [Etheruem, blockchain, Foundry]
draft： true
---

Hello! Everybody!

# 最初に

まず、[EIP1167](https://eips.ethereum.org/EIPS/eip-1167) というのがあります。これは、コントラクトのコードを複製するためのものです。

今回はこのコントラクトをゼロからビルドしてみます。一体これは何なのかを明らかにしてみましょう。

以下のバイトコードは今回の Minimal Proxy コントラクトの中身です。一見すると非常にこわそうに見えますが、実はとてもシンプルです。

🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥

```solidity
3d602d80600a3d3981f3363d3d373d3d3d363d73bebebebebebebebebebebebebebebebebebebebe5af43d82803e903d91602b57fd5bf3
```

🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥🔥

# なぜこれが必要なのか

例えば、あなたはユーザーごとにウォレットの Dapps のためにオンボーディングをしたいとします。あるいは、あなたはエスクローのためにコントラクトをデプロイしたいとします。このような場合、ユーザーごとにコントラクトをデプロイするのはときには非常にガス代のコストがかかります。なぜなら、コントラクトのデプロイにはガスが必要だからです。

このような場合、Minimal Proxy コントラクト（EIP1167）を使うことで、非常に賢いシンプルにこの課題を解決できます。コミュニティにいるメンバーはときにはこのコントラクトについてあまり理解していなかったり、あるいは、このコントラクトを使うことが怖くて、コントラクトのセキュリティについて心配することがあります。

これも理解できるでしょう。なぜなら、このコントラクトは EVM の low-level のコードによって構成されており、非常に複雑に見えるからです。しかし、実際には、このコントラクトは非常にシンプルです。この文章はこの難点に焦点を当て少しでも光を当てることを目的としています。

そこで、怖がることなく難なくこのコントラクトを活用できることを祈っています。

# Minimal?

ミニマムといったから、このコントラクトはあくまで必要最低限のコードしか記載されていないことを意味します。一個の巨大なコントラクトをデプロイするのではなく、非常に小さい Minimal Proxy をデプロイすることで、すべてのコールをこの implementation に転送（delegatecall）することができます。

note として言っておきたいのは、これは proxy pattern とはあまり関係がありません。delegatecall の部分は似ているが、upgradeability とかはあまり関係がありません。

# 最初から

Minimal Proxy は何をしなければならないのかから考えましょう。

1. データを受信する
2. そのデータを別のロジックコントラクトに転送する（delegatecall）
3. リターンした結果を受け取る(delegatecall の結果)
4. step 3 が成功したら、リターンした結果を caller へ返す。そうでない場合は、revert する。

| やりたいこと                                                  | EVM 命令              | 説明                                                                                                                              |
| ------------------------------------------------------------- | --------------------- | --------------------------------------------------------------------------------------------------------------------------------- |
| caller からもらったデータを加工                               | CALLDATACOPY          | calldata is the data sent to the contract in the transaction, so we need to copy that into memory to be able to later forward it. |
| DELEGATECALL を実行し、call を implementation contract へ導く | DELEGATECALL          | No surprise with this. Here, we’ll forward the calldata obtained to the implementation contract.                                  |
| 外部コールの結果を受け取る                                    | RETURNDATACOPY        | We copy the returned data of the DELEGATECALL into memory.                                                                        |
| データを caller へ転送するか revert する                      | JUMPI, RETURN, REVERT | Depending on the success/failure status of the external call, we either return data or revert the transaction.                    |

# Minimal Proxy コントラクトのコード

以上の４つのステップを覚えてください。get data, delegate the call, get the data retruned, return or revert.

## 1. Get the calldata

-   Main instruction: CALLDATACOPY
-   説明：現在のデータをメモリにコピーする。
-   3 つの引数がある。

| #   | Argument                                        | What we’ll pass                               |
| --- | ----------------------------------------------- | --------------------------------------------- |
| 1   | calldata を入れるメモリのコピー先メモリスロット | 0                                             |
| 2   | データの始まり位置                              | 0                                             |
| 3   | コピーしたいデータの量                          | CALLDATASIZE, as we want to copy all calldata |

この説明は EVM レベルでの作業を意味しています。そして、calldata のサイズを知るには、`CALLDATASIZE` を使います。

stack をこうしないといけないことになります。

```solidity
[ 0 | 0 | calldata size ("cds" from now on) ]
```

続いて以下のことをやればよいとわかる。

| Code | Instruction    | Stack   | Memory              |
| ---- | -------------- | ------- | ------------------- |
| 36   | CALLDATASIZE   | cds     | –                   |
| 3d   | RETURNDATASIZE | 0 cds   | –                   |
| 3d   | RETURNDATASIZE | 0 0 cds | –                   |
| 37   | CALLDATACOPY   | –       | [0, cds] = calldata |

ここでは、なぜ`RETURNDATASIZE`を使っているかわからないかもと思いますが、それは 1 つのテクニックです。通常だと、`PUSH` を使えば良いのですが、それは 3 units のガスがかかります。 `RETURNDATASIZE`を使えば、2 unit で済みます。

これでステップ１は完成しました。calldata はメモリにコピーされました。

## 2. Delegate the call

-   Main instruction: DELEGATECALL
-   説明：今のコンテキスト(sender and value)を保持しながら、別のコントラクトに calldata を転送する。そうすることで、今のコントラクトのストレージ環境を使って別のコントラクトのコードを実行することができる。

| #   | Argument                                           | What we’ll pass                                                           |
| --- | -------------------------------------------------- | ------------------------------------------------------------------------- |
| 1   | いくらのガスを転送するか                           | All, using the GAS instruction                                            |
| 2   | delegatecall の転送先 のコントラクト               | An address hardcoded in the minimal proxy’s bytecode (we’ll call it addr) |
| 3   | 転送データのスタートするメモリスロット             | 0                                                                         |
| 4   | 転送データのサイズ                                 | cds                                                                       |
| 5   | リターンデータが書き込まれるであろうメモリスロット | 0 (we won’t write to memory but return it instead)                        |
| 6   | メモリに書き込まれるであろうリターンデータのサイズ | 0 (we won’t write to memory but return it instead)                        |

したがって最終的にこのようなスタックにする必要があります。

```
[ gas | addr | 0 | cds | 0 | 0 ]
```

また、とても特別な理由で、もう一個単独な`0`をスタックに追加しなければなりません。理由は後述するとします。

EVM 命令を使って今のスタックをビルドしたいときに、以下のようになります。

| Code    | Instruction    | Stack                | Memory              |
| ------- | -------------- | -------------------- | ------------------- |
| 3d      | RETURNDATASIZE | 0                    | [0, cds] = calldata |
| 3d      | RETURNDATASIZE | 0 0                  | [0, cds] = calldata |
| 3d      | RETURNDATASIZE | 0 0 0                | [0, cds] = calldata |
| 36      | CALLDATASIZE   | cds 0 0 0            | [0, cds] = calldata |
| 3d      | RETURNDATASIZE | 0 cds 0 0 0          | [0, cds] = calldata |
| 73 addr | PUSH20 0x123…  | addr 0 cds 0 0 0     | [0, cds] = calldata |
| 5a      | GAS            | gas addr 0 cds 0 0 0 | [0, cds] = calldata |
| f4      | DELEGATECALL   | success 0            | [0, cds] = calldata |

再度、我々は`RETURNDATASIZE`を使っているが、これは`PUSH`を使うよりもガスが少なくて済むからです。

メモリのカラムはただ単にステップ 1 でやったことの残り結果です。

言っておきたいのは、`DELEGATECALL`は最初の 6 つのアイテムを消費し、`success`スタックに追加します。そして、`DELEGATECALL`は`CALL`と同じように、`success`というブール値を返します。`success`は`true`か`false`のどちらかです。

先程残した`0`の意味はこれからわかってくるでしょう。

今、`DELEGATECALL`を実行し、implementation コントラクトのロジックを呼び出し、step1 にてもらった calldata を渡します。

## 3. Get the data returned

`DELEGATECALL`によってスタックに入れた結果を確認すると、呼び出しが成功したか否かを知ることができます。だが、もし外部への呼び出しがエラーを返すあるいはリターンしたデータを返したときに、どうなるのか？

EVM は特別な命令を提供してくれているので、それらを使えば、リターンされたデータをメモリにコピーすることができます。

-   Main instruction: RETURNDATACOPY
-   説明：リターンされたデータをメモリにコピーする。
-   3 つの引数が必要となる。

| #   | Argument                                          | What we'll pass                                                       |
| --- | ------------------------------------------------- | --------------------------------------------------------------------- |
| 1   | Where in memory we want to copy the returned data | 0                                                                     |
| 2   | Start of the returned data                        | 0                                                                     |
| 3   | How much of the return data we want to copy       | size of the returned data after the external call (“rds” from now on) |

気をつけてほしいのは、一番最後の引数です。これは、`DELEGATECALL`の結果として返されたデータのサイズです。これは`RETURNDATASIZE`を使って取得できます。前みたいに 0 を返すとは限らなくなりました。

```
[ 0 | 0 | rds ]
```

スタックにはまだ 2 つのアイテムが残っていることに注意しましょう。

現在の状況はこれ。

```
[success | 0]
```

したがって、一番よい[ 0 | 0 | rds ]をスタックに追加する方法はこれ：

| Code | Instruction    | Stack             | Memory                                                                                                |
| ---- | -------------- | ----------------- | ----------------------------------------------------------------------------------------------------- |
| 3d   | RETURNDATASIZE | rds success 0     | [0, cds] = calldata                                                                                   |
| 82   | DUP3           | 0 rds success 0   | [0, cds] = calldata                                                                                   |
| 80   | DUP1           | 0 0 rds success 0 | [0, cds] = calldata                                                                                   |
| 3e   | RETURNDATACOPY | success 0         | [0, rds] = return data (there might be some irrelevant leftovers in memory [rds, cds] when rds < cds) |

## 4. Final stage: return or revert

最後のステップは、`DELEGATECALL`の結果を確認し、それに応じてリターンするか、revert するかを決めることです。

-   もし、success は 0 の場合、DELEGATECALL がフェールして revert する。
-   もし、success は 1 の場合、DELEGATECALL が成功して、リターンデータを返す。

EVM の言語では、条件分岐は JUMPI を使います。ただし、そのためには準備が必要です。

メモリにある[0 - rds] の内容は caller へ送らなければなりません。また、revert あるいは return の命令を実行する必要があります。両方の命令は２つのメモリポインターを引数とします。

```
[ 0 | rds ]
```

JUMPI は REVERT あるいは RETURN の前に来るため、スタックはこうなります。

```
[ dest | success | 0 | rds ]
```

最初の２つのアイテムは JUMPI の引数になります。残りの２つの引数は REVERT あるいは RETURN になります。現在、dest はバイトコードのプレイスホルダーの命令のポジション。事後に定義することができます。

今のスタックはもしこうなれば

```
[ success | 0 ]
```

## Reference

[Deep dive into the Minimal Proxy Contract](https://blog.openzeppelin.com/deep-dive-into-the-minimal-proxy-contract)

```

```

```

```
